Ext.data.JsonP.dev_output_format({"guide":"<!--\nCopyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='dev_output_format-section-html-output-formatting'>HTML Output Formatting</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/dev_output_format-section-the-html-output-writer'>The HTML Output Writer</a></li>\n<li>\n<a href='#!/guide/dev_output_format-section-setting-writer-rules'>Setting Writer Rules</a></li>\n<li>\n<a href='#!/guide/dev_output_format-section-adjusting-output-formatting-through-configuration'>Adjusting Output Formatting Through Configuration</a></li>\n<li>\n<a href='#!/guide/dev_output_format-section-html-output-formatting-demo'>HTML Output Formatting Demo</a></li>\n<li>\n<a href='#!/guide/dev_output_format-section-related-features'>Related Features</a></li></ol>\n</div>\n\n<p>CKEditor offers a powerful and flexible output formatting system. It\ngives developers full control over what the HTML code produced by the\neditor will look like. The system makes it possible to control all HTML\ntags and can give different results for each one of them.</p>\n\n<h2 id='dev_output_format-section-the-html-output-writer'>The HTML Output Writer</h2>\n\n<p>The <a href=\"http://ckeditor.com/addon/htmlwriter\">HTML Output Writer plugin</a> makes it possible to generate advanced output formatting with CKEditor.</p>\n\n<p>The <em>writer</em> is used by the <a href=\"#!/api/CKEDITOR.htmlDataProcessor\" rel=\"CKEDITOR.htmlDataProcessor\" class=\"docClass\">CKEDITOR.htmlDataProcessor</a> class to write output data.\nThe current writer for a specific editor instance can be retrieved with the <a href=\"#!/api/CKEDITOR.htmlDataProcessor-property-writer\" rel=\"CKEDITOR.htmlDataProcessor-property-writer\" class=\"docClass\">editor.dataProcessor.writer</a> property.</p>\n\n<p>It is possible to configure several output formatting options by setting\nthe writer properties. The following example summarizes the most common properties and gives their default values:</p>\n\n<pre><code>var writer = editor.dataProcessor.writer;\n\n// The character sequence to use for every indentation step.\nwriter.indentationChars = '\\t';\n\n// The way to close self-closing tags, like &lt;br /&gt;.\nwriter.selfClosingEnd = ' /&gt;';\n\n// The character sequence to be used for line breaks.\nwriter.lineBreakChars = '\\n';\n\n// The writing rules for the &lt;p&gt; tag.\nwriter.setRules( 'p', {\n    // Indicates that this tag causes indentation on line breaks inside of it.\n    indent: true,\n\n    // Inserts a line break before the &lt;p&gt; opening tag.\n    breakBeforeOpen: true,\n\n    // Inserts a line break after the &lt;p&gt; opening tag.\n    breakAfterOpen: true,\n\n    // Inserts a line break before the &lt;/p&gt; closing tag.\n    breakBeforeClose: false,\n\n    // Inserts a line break after the &lt;/p&gt; closing tag.\n    breakAfterClose: true\n});\n</code></pre>\n\n<h2 id='dev_output_format-section-setting-writer-rules'>Setting Writer Rules</h2>\n\n<p>Since the writer is a property of each editor instance and also due\nto its dependency on the HTML Output Writer plugin to be loaded, the best way to\nmodify it is by listening to the <a href=\"#!/api/CKEDITOR-event-instanceReady\" rel=\"CKEDITOR-event-instanceReady\" class=\"docClass\">CKEDITOR.instanceReady</a>\nevent, so it is safe to assume that the <a href=\"#!/api/CKEDITOR.editor-property-dataProcessor\" rel=\"CKEDITOR.editor-property-dataProcessor\" class=\"docClass\">CKEDITOR.editor.dataProcessor</a> property will be\nloaded and ready for changes. The following code shows an example of\nthis approach used when creating an editor instance:</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1', {\n    on: {\n        instanceReady: function( ev ) {\n            // Output paragraphs as &lt;p&gt;Text&lt;/p&gt;.\n            this.dataProcessor.writer.setRules( 'p', {\n                indent: false,\n                breakBeforeOpen: true,\n                breakAfterOpen: false,\n                breakBeforeClose: false,\n                breakAfterClose: true\n            });\n        }\n    }\n});\n</code></pre>\n\n<p>Another solution is to use the <a href=\"#!/api/CKEDITOR\" rel=\"CKEDITOR\" class=\"docClass\">CKEDITOR</a> object which will cause all editor instances to be changed:</p>\n\n<pre><code>CKEDITOR.on( 'instanceReady', function( ev ) {\n    // Ends self-closing tags the HTML4 way, like &lt;br&gt;.\n    ev.editor.dataProcessor.writer.selfClosingEnd = '&gt;';\n});\n</code></pre>\n\n<h2 id='dev_output_format-section-adjusting-output-formatting-through-configuration'>Adjusting Output Formatting Through Configuration</h2>\n\n<p>Numerous <a href=\"#!/guide/dev_configuration\">configuration options</a> let you tweak CKEditor behavior without touching the writer, including:</p>\n\n<ul style=\"margin-bottom:40px\">\n    <li>Entities support:\n        <ul>\n            <li style=\"float: left;\"><a href=\"http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-basicEntities\">config.basicEntities</a></li>\n            <li style=\"float: left;margin-left:30px\"><a href=\"#!/api/CKEDITOR.config-cfg-entities\">config.entities</a></li>\n            <li style=\"float: left;margin-left:30px\"><a href=\"#!/api/CKEDITOR.config-cfg-entities_greek\">config.entities_greek</a></li>\n            <li style=\"float: left;margin-left:30px\"><a href=\"#!/api/CKEDITOR.config-cfg-entities_latin\">config.entities_latin</a></li>\n            <li style=\"float: left;margin-left:30px\"><a href=\"#!/api/CKEDITOR.config-cfg-entities_processNumerical\">config.entities_processNumerical</a></li>\n        </ul>\n    </li>\n    <li style=\"clear:both\">White space usage:\n        <ul>\n            <li style=\"float: left;\"><a href=\"#!/api/CKEDITOR.config-cfg-dataIndentationChars\">config.dataIndentationChars</a></li>\n            <li style=\"float: left;margin-left:30px\"><a href=\"#!/api/CKEDITOR.config-cfg-sourceAreaTabSize\">config.sourceAreaTabSize</a></li>\n        </ul></li>\n    <li style=\"clear:both\">Handling block elements:\n        <ul>\n            <li style=\"float: left;\"><a href=\"#!/api/CKEDITOR.config-cfg-autoParagraph\">config.autoParagraph</a> (<strong>deprecated</strong>)</li>\n            <li style=\"float: left;margin-left:30px\"><a href=\"#!/api/CKEDITOR.config-cfg-fillEmptyBlocks\">config.fillEmptyBlocks</a></li>\n            <li style=\"float: left;margin-left:30px\"><a href=\"#!/api/CKEDITOR.config-cfg-ignoreEmptyParagraph\">config.ignoreEmptyParagraph</a></li>\n        </ul></li>\n    <li style=\"clear:both\">HTML encoding:\n        <ul>\n            <li style=\"float: left;\"><a href=\"#!/api/CKEDITOR.config-cfg-htmlEncodeOutput\">config.htmlEncodeOutput</a></li>\n        </ul>\n    </li>\n</ul>\n\n\n<h2 id='dev_output_format-section-html-output-formatting-demo'>HTML Output Formatting Demo</h2>\n\n<p>See the <a href=\"../samples/htmlformatting.html\">working \"HTML Output Formatting\" sample</a> that showcases how to control HTML output produced by CKEditor.</p>\n\n<h2 id='dev_output_format-section-related-features'>Related Features</h2>\n\n<p>See the <a href=\"#!/guide/dev_sourcearea\">Source Code Editing</a> feature that lets the users edit raw HTML source of the editor content directly in CKEditor.</p>\n","title":"HTML Output Formatting","meta_description":"How to configure CKEditor output formatting.","meta_keywords":"ckeditor, editor, wysiwyg, output, formatting, format, source, code, html, xhtml, data, writer, processor, indent, indentation, configuration, configure, modify, modification, change, customize, customization, customise, customisation"});