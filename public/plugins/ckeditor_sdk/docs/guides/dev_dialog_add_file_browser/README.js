Ext.data.JsonP.dev_dialog_add_file_browser({"guide":"<!--\nCopyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='dev_dialog_add_file_browser-section-adding-file-manager-to-a-dialog-window'>Adding File Manager to a Dialog Window</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/dev_dialog_add_file_browser-section-dialog-windows'>Dialog Windows</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-the-file-browser-plugin'>The File Browser Plugin</a><ol>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-adding-the-%22browse-server%22-button'>Adding the \"Browse Server\" Button</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-adding-%22quick-upload%22-support'>Adding \"Quick Upload\" Support</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-advanced-configuration---browsing'>Advanced Configuration - Browsing</a></li>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-advanced-configuration---quick-uploads'>Advanced Configuration - Quick Uploads</a></li>\n</ol>\n<li>\n<a href='#!/guide/dev_dialog_add_file_browser-section-further-reading'>Further Reading</a></li></ol>\n</div>\n\n<p>The aim of this article is to explain to plugin authors how to create CKEditor dialog windows that integrate seamlessly with a file manager.</p>\n\n<p class=\"requirements\">\n    CKEditor can be easily integrated with an external file manager (file browser/uploader) thanks to the <a href=\"http://ckeditor.com/addon/filebrowser\">File Browser</a> plugin which by default is included in every preset.\n</p>\n\n\n<p>To connect a file browser/uploader that is already compatible with CKEditor, refer to the <a href=\"#!/guide/dev_file_browse_upload\">File Manager Integration</a> article. If you want to integrate with <a href=\"http://cksource.com/ckfinder/\">CKFinder</a>,\ncheck the <a href=\"#!/guide/dev_ckfinder_integration\">CKFinder Integration</a> article.</p>\n\n<h2 id='dev_dialog_add_file_browser-section-dialog-windows'>Dialog Windows</h2>\n\n<p>Please refer to the CKEditor <a href=\"#!/api/CKEDITOR.dialog.definition\" rel=\"CKEDITOR.dialog.definition\" class=\"docClass\">dialog definition API</a> for general information on how to create a dialog window.</p>\n\n<h2 id='dev_dialog_add_file_browser-section-the-file-browser-plugin'>The File Browser Plugin</h2>\n\n<p>The <a href=\"http://ckeditor.com/addon/filebrowser\">File Browser</a> plugin is built-in into CKEditor. Its only purpose is to provide an API inside CKEditor to easily integrate any external file manager and to add file browser/uploader features to various CKEditor components (usually to dialog windows).</p>\n\n<h3 id='dev_dialog_add_file_browser-section-adding-the-%22browse-server%22-button'>Adding the \"Browse Server\" Button</h3>\n\n<p>To assign the File Browser plugin to an element inside a dialog window, set the <code>filebrowser</code> property. For example in the <a href=\"https://github.com/ckeditor/ckeditor-dev/blob/master/plugins/image/dialogs/image.js\">Image plugin dialog window source</a> you can find the following code:</p>\n\n<pre><code>{\n    type: 'button',\n    id: 'browse',\n    // ...\n    label: editor.lang.common.browseServer,\n    hidden: true,\n    filebrowser: 'info:txtUrl'\n},\n</code></pre>\n\n<p>This button will be hidden by default (<code>hidden:true</code>). The File Browser plugin looks for all elements with the <code>filebrowser</code> attribute and unveils them if an appropriate configuration setting is available (<a href=\"#!/guide/dev_file_browse_upload-section-basic-configuration\"><code>filebrowserBrowseUrl</code>/<code>filebrowserUploadUrl</code></a>).</p>\n\n<p>The action performed by the plugin depends on the element type. For <a href=\"#!/api/CKEDITOR.dialog.definition.fileButton\" rel=\"CKEDITOR.dialog.definition.fileButton\" class=\"docClass\">fileButton</a>\nit is <strong>QuickUpload</strong>, for other elements the default action is <strong>Browse</strong>. In the example above, the file manager will be launched (in\na popup) when the button is clicked.</p>\n\n<p>The <code>'info:txtUrl'</code> value instructs the plugin to update an element with the ID of <code>txtUrl</code> inside the <code>info</code> tab when <a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a> is called (see <a href=\"#!/guide/dev_file_browser_api\">File Browser API - Creating a Custom File Manager</a>).</p>\n\n<h3 id='dev_dialog_add_file_browser-section-adding-%22quick-upload%22-support'>Adding \"Quick Upload\" Support</h3>\n\n<p>Again, to see how file uploads can be handled in a dialog window, the following working example from CKEditor will be used. In the <a href=\"https://github.com/ckeditor/ckeditor-dev/blob/master/plugins/image/dialogs/image.js\">Image plugin dialog window source</a> you can find the following definition of the <code>Upload</code> tab:</p>\n\n<pre><code>{\n    id: 'Upload',\n    hidden: true,\n    filebrowser: 'uploadButton',\n    label: editor.lang.image.upload,\n    elements: [ {\n        type: 'file',\n        id: 'upload',\n        label: editor.lang.image.btnUpload,\n        style: 'height:40px',\n        size: 38\n    },\n    {\n        type: 'fileButton',\n        id: 'uploadButton',\n        filebrowser: 'info:txtUrl',\n        label: editor.lang.image.btnUpload,\n        'for': [ 'Upload', 'upload' ]\n    } ]\n},\n</code></pre>\n\n<p>This example is slightly more complicated than the previous one, because:</p>\n\n<ul>\n<li>It contains the definition of the entire dialog window tab.</li>\n<li>Two elements (<a href=\"#!/api/CKEDITOR.dialog.definition.file\" rel=\"CKEDITOR.dialog.definition.file\" class=\"docClass\">file</a> and <a href=\"#!/api/CKEDITOR.dialog.definition.fileButton\" rel=\"CKEDITOR.dialog.definition.fileButton\" class=\"docClass\">fileButton</a>) are needed to upload a file.</li>\n</ul>\n\n\n<p>In the example above, the ID of the tab is <code>'Upload'</code>. The tab is hidden by default (<code>hidden:true</code>). As mentioned above, the File Browser plugin looks for all elements with the <code>filebrowser</code> attribute and unveils them if an appropriate configuration setting is available. In this case, the tab will be shown automatically if a <code>filebrowser</code> setting for <code>'uploadButton'</code> (because of <code>filebrowser:'uploadButton'</code>) will be available (<code>filebrowserUploadUrl</code>).</p>\n\n<p>The <code>file</code> element is just an input element that will store the name of the file that will be uploaded.</p>\n\n<p>The <code>fileButton</code> element is more interesting. The <code>'info:txtUrl'</code> value instructs the File Browser plugin to update an element with the ID of <code>txtUrl</code> inside the <code>info</code> tab when <a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a> is called (see <a href=\"#!/guide/dev_file_browser_api\">File Browser API - Creating a Custom File Manager</a>).</p>\n\n<p>The <code>'for': [ 'Upload', 'upload'   ]</code> line is used to connect <code>fileButton</code> with the <code>file</code> element. It is an instruction for CKEditor to upload the file using the <code>'file'</code> element with the ID of <code>'upload'</code> (second value) inside the <code>'Upload'</code> tab (first value).</p>\n\n<h3 id='dev_dialog_add_file_browser-section-advanced-configuration---browsing'>Advanced Configuration - Browsing</h3>\n\n<p>It is possible to define your own function that will be called when a file is selected/uploaded.</p>\n\n<pre><code>{\n    type: 'button',\n    hidden: true,\n    id: 'id0',\n    label: editor.lang.common.browseServer,\n    filebrowser: {\n        action: 'Browse',\n        // target: 'tab1:id1',\n        onSelect: function( fileUrl, data ) {\n            alert( 'The selected file URL is \"' + fileUrl + '\"' );\n\n            for ( var _info in data )\n                alert( 'data[ \"' + _info + '\" ]' + ' = ' + data[ _info ] );\n\n            var dialog = this.getDialog();\n            dialog.getContentElement( 'tab1', 'id1' ).setValue( data[ 'fileUrl' ] );\n\n            // Do not call the built-in onSelect command.\n            return false;\n        }\n    }\n}\n</code></pre>\n\n<p>In this example the action is set to <code>'Browse'</code> in order to call the file manager when the button is clicked. Setting <code>'target'</code> is not required, because the target element will be updated in the custom <code>onSelect</code> function.</p>\n\n<p>As explained in the <a href=\"#!/guide/dev_file_browser_api\">File Browser API documentation</a>, <code><a href=\"#!/api/CKEDITOR.tools-method-callFunction\" rel=\"CKEDITOR.tools-method-callFunction\" class=\"docClass\">CKEDITOR.tools.callFunction</a>( funcNum, fileUrl, data );</code> is called when the user selected a file. The <code>fileUrl</code> and <code>data</code> arguments are passed to the custom <code>onSelect</code> function and can be used to update the target element.</p>\n\n<h3 id='dev_dialog_add_file_browser-section-advanced-configuration---quick-uploads'>Advanced Configuration - Quick Uploads</h3>\n\n<p>In a similar way that a button can be configured to open the file manager, you can also configure the file button.</p>\n\n<pre><code>{\n    type: 'file',\n    label: editor.lang.common.upload,\n    labelLayout: 'vertical',\n    id: 'id2'\n},\n{\n    type: 'fileButton',\n    label: editor.lang.common.uploadSubmit,\n    id: 'id3',\n    filebrowser: {\n        action: 'QuickUpload',\n        params: { type: 'Files', currentFolder: '/folder/' },\n        target: 'tab1:id1',\n        onSelect: function( fileUrl, errorMessage ) {\n            alert( 'The url of uploaded file is: ' + fileUrl + '\\nerrorMessage: ' + errorMessage );\n            // Do not call the built-in onSelect command.\n            // return false;\n        }\n    },\n    'for': [ 'tab1', 'id2' ]\n}\n</code></pre>\n\n<p>Additional arguments to be passed in the query string to the external file manager can be added in the <code>filebrowser.params</code> attribute.</p>\n\n<p><code>filebrowser.target</code> is the target element to be updated when the file is returned by the server connector (uploader) &mdash; you do not need it if you define your own <code>onSelect</code> function (<code>filebrowser.onSelect</code>) and update the target element in this function, just like it was done in the previous example.</p>\n\n<h2 id='dev_dialog_add_file_browser-section-further-reading'>Further Reading</h2>\n\n<p>For more information on integrating CKEditor with a file manager refer to the following articles:</p>\n\n<ul>\n<li><a href=\"#!/guide/dev_file_browse_upload\">File Manager Integration</a></li>\n<li><a href=\"#!/guide/dev_file_manager_configuration\">Advanced File Manager Configuration</a></li>\n<li><a href=\"#!/guide/dev_ckfinder_integration\">CKFinder Integration</a></li>\n<li><a href=\"#!/guide/dev_file_browser_api\">File Browser API - Creating a Custom File Manager</a></li>\n<li><a href=\"#!/guide/dev_drop_paste\">Uploading Pasted and Dropped Files</a></li>\n</ul>\n\n\n<p>See also the <a href=\"#!/guide/plugin_sdk_intro\">CKEditor Plugin SDK</a> with tutorials on creating your own plugins with dialog windows.</p>\n","title":"Integrating with Dialogs","meta_description":"How to integrate a file browser with CKEditor dialog windows.","meta_keywords":"ckeditor, editor, integrate, integration, file, files, upload, manage, management, browse, browser, image, images, dialog, dialogs, window, windows"});