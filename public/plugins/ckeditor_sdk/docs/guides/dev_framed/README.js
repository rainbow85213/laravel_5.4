Ext.data.JsonP.dev_framed({"guide":"<!--\nCopyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='dev_framed-section-classic-editing'>Classic Editing</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/dev_framed-section-content-styles-vs.-page-styles'>Content Styles vs. Page Styles</a></li>\n<li>\n<a href='#!/guide/dev_framed-section-creating-a-classic-editor-with-a-textarea'>Creating a Classic Editor with a Textarea</a><ol>\n<li>\n<a href='#!/guide/dev_framed-section-alternative-methods-for-creating-a-classic-editor'>Alternative Methods for Creating a Classic Editor</a></li>\n</ol>\n<li>\n<a href='#!/guide/dev_framed-section-complete-sample'>Complete Sample</a></li>\n<li>\n<a href='#!/guide/dev_framed-section-classic-editing-demo'>Classic Editing Demo</a></li>\n<li>\n<a href='#!/guide/dev_framed-section-further-reading'>Further Reading</a></li></ol>\n</div>\n\n<p>Classic editing is still probably the most common way to use CKEditor. In this usage scenario the editor is most often represented by a toolbar and an editing area placed in a specific position on the page, usually as a part of a form that you use to submit some content to the server. Sometimes it is also called \"framed editing\", because in this case the editor creates a temporary <code>&lt;iframe&gt;</code> element for itself.</p>\n\n<p>This method is used in the <a href=\"#!/guide/dev_installation-section-adding-ckeditor-to-your-page\">Quick Start Guide</a> example. To try it out, see also the <a href=\"../samples/classic.html\">classic editing demo</a>.</p>\n\n<p><img src=\"guides/dev_ckeditor_js_load/classic_example.png\" alt=\"Classic editor example\"></p>\n\n<h2 id='dev_framed-section-content-styles-vs.-page-styles'>Content Styles vs. Page Styles</h2>\n\n<p>In classic editing <strong>the styles of the editor content are separated from the styles of the surrounding page</strong>. It is particularly useful when:</p>\n\n<ul>\n<li>Admininistration and frontend themes in a CMS are different &mdash; as in such case inheriting styles from the backend theme would make no sense.</li>\n<li>Edited content is rendered in different locations of a website that may have different styling &mdash; as in such case it is more efficient to just focus on creating semantically correct syntax.</li>\n<li>The editor works in a changeable environment (e.g. a themable CMS) &mdash; where it is hard to predict how user themes will be constructed.</li>\n</ul>\n\n\n<p>Due to focus on semantic markup and possible differences between the styles of content within the editor and the styles used when the content is rendered on a page, such editors are sometimes called <abbr title=\"What You See Is What You Mean\">WYSIWYM</abbr> editors (\"What You See Is What You Mean\").</p>\n\n<h2 id='dev_framed-section-creating-a-classic-editor-with-a-textarea'>Creating a Classic Editor with a Textarea</h2>\n\n<p>After <a href=\"#!/guide/dev_ckeditor_js_load\">loading the CKEditor script</a> you will be ready to create your classic editor instances.</p>\n\n<p>In classic editing, CKEditor can work just like a <code>&lt;textarea&gt;</code> HTML element on your page. The editor offers a user interface to write, format, and work with rich text in a hassle-free manner, but the same content could be added (though not that easily) through a <code>&lt;textarea&gt;</code> element, requiring the user to type HTML code inside.</p>\n\n<p>As a matter of fact, in this scenario CKEditor uses the <code>&lt;textarea&gt;</code> element to transfer its data to the server. The <code>&lt;textarea&gt;</code> element is invisible to the end user. In order to create an editor instance using this approach, you must first add a <code>&lt;textarea&gt;</code> element to the source code of your HTML page:</p>\n\n<pre><code>&lt;textarea name=\"editor1\" id=\"editor1\"&gt;&amp;lt;p&amp;gt;Initial editor content.&amp;lt;/p&amp;gt;&lt;/textarea&gt;\n</code></pre>\n\n<p>Note that if you want to load data into the editor, for example from a database, you need to put that data inside the <code>&lt;textarea&gt;</code> element, just like the HTML-encoded <code>&lt;p&gt;</code> element in the example above. In this case the <code>&lt;textarea&gt;</code> element was named <code>editor1</code>. This name can be used in the server-side code later, when receiving the submitted data.</p>\n\n<p>After the <code>&lt;textarea&gt;</code> element is inserted, you can use the <a href=\"#!/api\">CKEditor JavaScript API</a> to replace this HTML element with an editor instance. A simple (and most commonly used) <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a> method call will be enough to achieve that:</p>\n\n<pre><code>&lt;script&gt;\n    <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1' );\n&lt;/script&gt;\n</code></pre>\n\n<p>This script block must be included at any point after the <code>&lt;textarea&gt;</code> tag in the source code of the page. You can also call the <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a> method inside the <code>&lt;head&gt;</code> section, but in this case you will need to listen for the <code>window.onload</code> event:</p>\n\n<pre><code>&lt;script&gt;\n    window.onload = function() {\n        <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1' );\n    };\n&lt;/script&gt;\n</code></pre>\n\n<h3 id='dev_framed-section-alternative-methods-for-creating-a-classic-editor'>Alternative Methods for Creating a Classic Editor</h3>\n\n<p>Apart from the <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a> method you can also use the following options to create a classic editor on your page:</p>\n\n<ul>\n<li>The <a href=\"#!/api/CKEDITOR-method-appendTo\" rel=\"CKEDITOR-method-appendTo\" class=\"docClass\">CKEDITOR.appendTo</a> method &ndash; Creates a new editor instance at the end of a specific DOM element.</li>\n<li>The <a href=\"#!/api/CKEDITOR-method-replaceAll\" rel=\"CKEDITOR-method-replaceAll\" class=\"docClass\">CKEDITOR.replaceAll</a> method &ndash; Replaces all <code>&lt;textarea&gt;</code> elements available in the document (or just all those that match certain criteria) with editor instances.</li>\n<li>The automatic replacement of all <code>&lt;textarea&gt;</code> elements of a <code>ckeditor</code> class in the document with CKEditor instances.</li>\n</ul>\n\n\n<h2 id='dev_framed-section-complete-sample'>Complete Sample</h2>\n\n<p>To insert a CKEditor instance, you can use the following sample that creates a basic HTML page containing a form with a <code>&lt;textarea&gt;</code> element that is replaced with CKEditor.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;CKEditor Classic Editing Sample&lt;/title&gt;\n    &lt;!-- Make sure the path to CKEditor is correct. --&gt;\n    &lt;script src=\"/ckeditor/ckeditor.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form method=\"post\"&gt;\n        &lt;p&gt;\n            My Editor:&lt;br&gt;\n            &lt;textarea name=\"editor1\" id=\"editor1\"&gt;&amp;lt;p&amp;gt;Initial editor content.&amp;lt;/p&amp;gt;&lt;/textarea&gt;\n            &lt;script&gt;\n                <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1' );\n            &lt;/script&gt;\n        &lt;/p&gt;\n        &lt;p&gt;\n            &lt;input type=\"submit\"&gt;\n        &lt;/p&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2 id='dev_framed-section-classic-editing-demo'>Classic Editing Demo</h2>\n\n<p>See the <a href=\"../samples/classic.html\">working \"Classic Editor\" sample</a> that showcases a few usage scenarios for classic editing.</p>\n\n<h2 id='dev_framed-section-further-reading'>Further Reading</h2>\n\n<p>Check the following articles to learn more about other editor types and learn how to get and save the editor data:</p>\n\n<ul>\n<li><a href=\"#!/guide/dev_inline\">Inline editing</a> is a new technology introduced in CKEditor 4 that allows you to select any editable element on the page and edit it in-place.</li>\n<li><a href=\"#!/guide/dev_savedata\">Getting and Saving Data in CKEditor</a> explains how to retrieve data from any editor instance and send it to your server.</li>\n</ul>\n\n","title":"Classic Editing","meta_description":"What classic editing is and how to enable it.","meta_keywords":"ckeditor, editor, wysiwyg, classic, framed, iframe, textarea"});