Ext.data.JsonP.dev_savedata({"guide":"<!--\nCopyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='dev_savedata-section-getting-and-saving-data-in-ckeditor'>Getting and Saving Data in CKEditor</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/dev_savedata-section-retrieving-data-from-ckeditor'>Retrieving Data from CKEditor</a></li>\n<li>\n<a href='#!/guide/dev_savedata-section-saving-data-in-ckeditor-replacing-a-textarea'>Saving Data in CKEditor Replacing a Textarea</a></li>\n<li>\n<a href='#!/guide/dev_savedata-section-observing-changes-in-ckeditor'>Observing Changes in CKEditor</a></li>\n<li>\n<a href='#!/guide/dev_savedata-section-the-save-plugin'>The Save Plugin</a></li>\n<li>\n<a href='#!/guide/dev_savedata-section-getting-and-saving-data-demos'>Getting and Saving Data Demos</a></li></ol>\n</div>\n\n<p>CKEditor helps you create content but it is the role of your website or application to deal with the data created in this way. Saving data is a server-side operation and you are free to implement the save functionality on your own, in any way you like. CKEditor is a pure JavaScript component and it does not offer anything more than JavaScript methods and events to access the data so that you could save it on the server.</p>\n\n<p>The <a href=\"#!/api\">CKEditor JavaScript API</a> makes it easy to retrieve and control the data. Depending on your usage scenario, the data can either be submitted to your server along with the parent <code>&lt;form&gt;</code> element or be used in Ajax applications where editor instances are created and destroyed dynamically.</p>\n\n<h2 id='dev_savedata-section-retrieving-data-from-ckeditor'>Retrieving Data from CKEditor</h2>\n\n<p>Some applications need to handle all data on the client side, sending it to the server using their specific methods. This is what usually happens in <a href=\"#!/guide/dev_inline\">inline editing</a> &mdash; with the possibility to <a href=\"#!/api/CKEDITOR-method-inline\">create</a> and <a href=\"#!/api/CKEDITOR.editor-method-destroy\">destroy</a> CKEditor instances dynamically, CKEditor is a perfect match for Ajax applications. If this is the case, it is enough to use the JavaScript API methods to easily retrieve the editor instance data.</p>\n\n<p>To retrieve the editor data, call the <a href=\"#!/api/CKEDITOR.editor-method-getData\" rel=\"CKEDITOR.editor-method-getData\" class=\"docClass\">CKEDITOR.editor.getData</a> method of the editor instance. For an editor instance with an ID of <code>editor1</code>, this would look like the following:</p>\n\n<pre><code>&lt;script&gt;\n    var data = CKEDITOR.instances.editor1.getData();\n\n    // Your code to save \"data\", usually through Ajax.\n&lt;/script&gt;\n</code></pre>\n\n<p class=\"tip\">\n    If you do not save your data with a library that already encodes it by using the JavaScript <code>encodeURIComponent</code> method, but do it manually instead, you will have to remember to use <code>encodeURIComponent</code> to properly encode the data that is being sent.\n</p>\n\n\n<p>Note that the ID of the original element that is replaced with CKEditor was passed to the <a href=\"#!/api/CKEDITOR-property-instances\" rel=\"CKEDITOR-property-instances\" class=\"docClass\">CKEDITOR.instances</a> object to make it possible to retrieve the editor instance.</p>\n\n<h2 id='dev_savedata-section-saving-data-in-ckeditor-replacing-a-textarea'>Saving Data in CKEditor Replacing a Textarea</h2>\n\n<p>When CKEditor functions as a replacement for a <code>&lt;textarea&gt;</code> element, the integration with the parent <code>&lt;form&gt;</code> element is automatic. CKEditor automatically updates the replaced <code>&lt;textarea&gt;</code> when the form is submitted, so there is no need to change any server-side code handling form submission after enabling CKEditor on an exisiting form element.</p>\n\n<p>This means that when submitting a form containing an editor instance, its data will simply be posted to the server, using the <code>&lt;textarea&gt;</code> element name as the key to retrieve it.</p>\n\n<p>For example, for the <code>&lt;textarea&gt;</code> element with an ID of <code>editor1</code>, as used in our <a href=\"#!/guide/dev_installation-section-adding-ckeditor-to-your-page\">Quick Start Guide example</a>, you could create this PHP code:</p>\n\n<pre><code>&lt;?php\n    $editor_data = $_POST[ 'editor1' ];\n?&gt;\n</code></pre>\n\n<p>This method works for any CKEditor instance that replaces a <code>&lt;textarea&gt;</code> in a <code>&lt;form&gt;</code> element, both <a href=\"#!/guide/dev_framed-section-creating-a-classic-editor-with-a-textarea\">classic</a> and <a href=\"#!/guide/dev_inline-section-inline-editing-for-textarea\">inline</a>.</p>\n\n<div class=\"tip\">\n    <p>Please note that the replaced <code>&lt;textarea&gt;</code> element is updated automatically by CKEditor straight before submission. If you need to access the <code>&lt;textarea&gt;</code> value programatically with JavaScript (e.g. in the <code>onsubmit</code> handler to validate the entered data), there is a chance that the <code>&lt;textarea&gt;</code> element would still store the original data. In order to update the value of replaced <code>&lt;textarea&gt;</code> use the <code><a href=\"#!/api/CKEDITOR.editor-method-updateElement\">editor.updateElement()</a></code> method.</p>\n    <p>In rare cases it may happen that the server or application configuration will reject submitted HTML content if it is not encoded first (e.g. ASP.NET <code>ValidateRequest</code>). In such case check the <a href=\"#!/api/CKEDITOR.config-cfg-htmlEncodeOutput\">config.htmlEncodeOutput</a> option.</p>\n    <p>If you need to get the actual data from CKEditor at any moment using JavaScript, use the <code><a href=\"#!/api/CKEDITOR.editor-method-getData\">editor.getData()</a></code> method as described above.</p>\n</div>\n\n\n<h2 id='dev_savedata-section-observing-changes-in-ckeditor'>Observing Changes in CKEditor</h2>\n\n<p>Whenever a change is made in the editor, CKEditor fires the <a href=\"#!/api/CKEDITOR.editor-event-change\">change</a> event. This makes additional features like auto-saving really easy to develop.</p>\n\n<p>The following example shows how to listen to the <code>change</code> event and print the total number of bytes to the console:</p>\n\n<pre><code>var editor = <a href=\"#!/api/CKEDITOR-method-replace\" rel=\"CKEDITOR-method-replace\" class=\"docClass\">CKEDITOR.replace</a>( 'editor1' );\n\n// The \"change\" event is fired whenever a change is made in the editor.\neditor.on( 'change', function( evt ) {\n    // getData() returns CKEditor's HTML content.\n    console.log( 'Total bytes: ' + evt.editor.getData().length );\n});\n</code></pre>\n\n<h2 id='dev_savedata-section-the-save-plugin'>The Save Plugin</h2>\n\n<p>A dedicated <strong><a href=\"http://ckeditor.com/addon/save\">Save</a></strong> plugin for CKEditor is available, too. It provides the <img class=\"inline\" src=\"guides/dev_savedata/save_01.png\" title=\"Save\" alt=\"Save\"> button, which fires the <a href=\"#!/api/CKEDITOR.editor-event-save\">save</a> event, but it currently works only for classic editor placed inside the <code>&lt;form&gt;</code> element.</p>\n\n<h2 id='dev_savedata-section-getting-and-saving-data-demos'>Getting and Saving Data Demos</h2>\n\n<p>The following samples are available for getting and saving data in CKEditor:</p>\n\n<ul>\n<li>The <a href=\"../samples/savetextarea.html\">Saving Data in CKEditor Replacing a Textarea</a> sample shows how to save data for classic and inline editor replacing a <code>&lt;textarea&gt;</code> element.</li>\n<li>The <a href=\"../samples/saveajax.html\">CKEditor in Ajax Applications</a> sample shows how to dynamically create and destroy the editor and how to use the <a href=\"#!/api/CKEDITOR.editor-event-change\">change</a> event.</li>\n</ul>\n\n","title":"Getting and Saving Data","meta_description":"How to retrieve and save CKEditor data.","meta_keywords":"ckeditor, editor, wysiwyg, classic, framed, inline, save, saving, submit, submitting, post, posting, data, content, server, ajax, change, form, textarea"});