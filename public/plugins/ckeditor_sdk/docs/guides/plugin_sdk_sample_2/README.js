Ext.data.JsonP.plugin_sdk_sample_2({"guide":"<!--\nCopyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='plugin_sdk_sample_2-section-creating-a-simple-ckeditor-plugin-%28part-2%29'>Creating a Simple CKEditor Plugin (Part 2)</h1>\n<div class='toc'>\n<p><strong>Contents</strong></p>\n<ol>\n<li><a href='#!/guide/plugin_sdk_sample_2-section-context-menu-support'>Context Menu Support</a><ol>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-showing-the-menu-option-%22in-context%22'>Showing the Menu Option \"In Context\"</a></li>\n</ol>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-dialog-window-logic'>Dialog Window Logic</a><ol>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-getting-the-selected-element'>Getting the Selected Element</a></li>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-insert-and-edit-modes'>Insert and Edit Modes</a></li>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-setup-functions'>Setup Functions</a></li>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-commit-functions'>Commit Functions</a></li>\n</ol>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-full-source-code'>Full Source Code</a></li>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-working-example'>Working Example</a></li>\n<li>\n<a href='#!/guide/plugin_sdk_sample_2-section-further-reading'>Further Reading</a></li></ol>\n</div>\n\n<p>The aim of this tutorial is to demonstrate how to extend an existing CKEditor\nplugin with context menu support as well as the possibility to edit a previously\ninserted element.</p>\n\n<p>Instead of creating a new plugin, this time we are going to\nexpand on the functionality of the <strong>Abbreviation</strong> plugin created in the\n<a href=\"#!/guide/plugin_sdk_sample_1\">previous installment</a> of the tutorial series.</p>\n\n<p class=\"tip\">\n    We need to start where we previously left off.\n    You can download the <a href=\"https://github.com/ckeditor/ckeditor-docs-samples/tree/master/tutorial-abbr-1\">entire\n    plugin folder</a> including the icon and the fully commented source code.\n</p>\n\n\n<p>If you have any doubts about the content of the plugin and its configuration, refer to the\n<a href=\"#!/guide/plugin_sdk_sample_1\">Creating a Simple CKEditor Plugin (Part 1)</a> tutorial.</p>\n\n<p class=\"tip alert\">\n    Please note that <strong>since CKEditor 4.1 all editor plugins that create content\n    should be integrated with <a href=\"#!/guide/dev_acf\">Advanced Content Filter</a>\n    (ACF)</strong>.\n    <br>\n\n    To follow this guide and at the same time comply with the new CKEditor 4.1 requirements you\n    need to either set <code>config.allowedContent = true;</code> in order to disable\n    <a href=\"#!/guide/dev_advanced_content_filter\">content filtering</a> or\n    <a href=\"#!/guide/plugin_sdk_integration_with_acf\">integrate your plugin with ACF</a>.\n    For more information, please refer to the official\n    <a href=\"#!/guide/plugin_sdk_integration_with_acf\">Advanced Content Filter integration guide</a>.\n</p>\n\n\n<h2 id='plugin_sdk_sample_2-section-context-menu-support'>Context Menu Support</h2>\n\n<p>Context menu support in CKEditor is implemented by the <a href=\"http://ckeditor.com/addon/contextmenu\">Context Menu plugin</a>.</p>\n\n<p>The context menu implementation should be placed inside the <a href=\"#!/api/CKEDITOR.pluginDefinition-method-init\" rel=\"CKEDITOR.pluginDefinition-method-init\" class=\"docClass\">init</a> function in the plugin file, following the command and button definitions:</p>\n\n<pre><code>if ( editor.contextMenu ) {\n    editor.addMenuGroup( 'abbrGroup' );\n    editor.addMenuItem( 'abbrItem', {\n        label: 'Edit Abbreviation',\n        icon: this.path + 'icons/abbr.png',\n        command: 'abbr',\n        group: 'abbrGroup'\n    });\n}\n</code></pre>\n\n<p>The <code>if</code> check here is a \"best practice\". If for some reason the Context Menu plugin will be removed or not available, the menu registration should not take place (otherwise an exception is thrown).</p>\n\n<p>Then, considering that we want the context menu option for the Abbreviation plugin to be separated from standard context menu items, we used the <a href=\"#!/api/CKEDITOR.editor-method-addMenuGroup\" rel=\"CKEDITOR.editor-method-addMenuGroup\" class=\"docClass\">editor.addMenuGroup</a> function to register a new menu group called <code>abbrGroup</code>.</p>\n\n<p>Using the <a href=\"#!/api/CKEDITOR.editor-method-addMenuItem\" rel=\"CKEDITOR.editor-method-addMenuItem\" class=\"docClass\">editor.addMenuItem</a> function we\ncan now register a new menu item that will belong to the newly created group.\nThe label and icon properties let us set the context menu item name and its icon,\nrespectively. To make the context menu item open the <strong>Abbreviation Properties</strong>\ndialog window, we need to set the <code>command</code> property to use the <code>abbr</code> command.</p>\n\n<h3 id='plugin_sdk_sample_2-section-showing-the-menu-option-%22in-context%22'>Showing the Menu Option \"In Context\"</h3>\n\n<p>However, when we reload the CKEditor instance and add an abbreviation, the\ncontext menu does not contain the newly created <strong>Edit Abbreviation</strong> item. We now\nneed to enable the Abbreviation context menu for each selected <code>&lt;abbr&gt;</code> element:</p>\n\n<pre><code>if ( editor.contextMenu ) {\n    ... the previous context menu creation code ...\n\n    editor.contextMenu.addListener( function( element ) {\n        if ( element.getAscendant( 'abbr', true ) ) {\n            return { abbrItem: <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a> };\n        }\n    });\n}\n</code></pre>\n\n<p>By using the <a href=\"#!/api/CKEDITOR.menu-method-addListener\" rel=\"CKEDITOR.menu-method-addListener\" class=\"docClass\">addListener</a> method we will add an event listener function that will be called whenever the context menu is fired.</p>\n\n<p>At this point we just check if the current element, or any of its parents, is an <code>&lt;abbr&gt;</code>. If this is true, we simply return the menu item to activate (<code>abbrItem</code>) saying that it is enabled but not in the \"selected state\" (<a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a>).</p>\n\n<p>The <strong>Edit Abbreviation</strong> item is now visible in the context menu of an <code>&lt;abbr&gt;</code>\nelement. Once selected, it opens the <strong>Abbreviation Properties</strong> dialog window\ndue to the use of the <code>abbr</code> command.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginContextMenu.png\" alt=\"Edit Abbreviation context menu item added to CKEditor\" width=\"610\" height=\"279\"></p></p>\n\n<p>The context menu works &mdash; but only partially. It opens the <strong>Abbreviation Properties</strong>\ndialog window for the abbreviation, but the editing feature does not really work.\nThe <strong>Abbreviation</strong> and <strong>Explanation</strong> fields are empty:</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogEmpty.png\" alt=\"Abbreviation Properties is empty in editing mode\" width=\"607\" height=\"431\"></p></p>\n\n<p>If you try to enter some values into these fields and accept the changes, a\nnew <code>&lt;abbr&gt;</code> element will be added at the position of the cursor in the document.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogFailed.png\" alt=\"New abbreviation element inserted into the document\" width=\"607\" height=\"254\"></p></p>\n\n<p>It is time to work on the selection logic so that editing an inserted element\nwould not create a new one, but use the previously entered values.</p>\n\n<h2 id='plugin_sdk_sample_2-section-dialog-window-logic'>Dialog Window Logic</h2>\n\n<p>The editing behavior for a previously inserted element will use the\n<a href=\"#!/api/CKEDITOR.dialog.definition-property-onShow\" rel=\"CKEDITOR.dialog.definition-property-onShow\" class=\"docClass\">onShow</a>\nfunction that is defined for the plugin dialog window and is executed when\nthe dialog window is opened. This function will be defined above the <code>onOk</code>\nfunction that we will also need to refactor later.</p>\n\n<pre><code>onShow: function() {\n    // The code that will be executed when a dialog window is loaded.\n},\n</code></pre>\n\n<h3 id='plugin_sdk_sample_2-section-getting-the-selected-element'>Getting the Selected Element</h3>\n\n<p>We will need to start with the selection logic.</p>\n\n<p>To get to the element that is selected by the user (either highlighted or just having the caret inside), we need to use the <a href=\"#!/api/CKEDITOR.editor-method-getSelection\" rel=\"CKEDITOR.editor-method-getSelection\" class=\"docClass\">editor.getSelection</a> method:</p>\n\n<pre><code>var selection = editor.getSelection();\n</code></pre>\n\n<p>We will also use the <a href=\"#!/api/CKEDITOR.dom.selection-method-getStartElement\" rel=\"CKEDITOR.dom.selection-method-getStartElement\" class=\"docClass\">selection.getStartElement</a> method to get the element in which the selection starts, and assign it to the <code>element</code> variable:</p>\n\n<pre><code>var element = selection.getStartElement();\n</code></pre>\n\n<h3 id='plugin_sdk_sample_2-section-insert-and-edit-modes'>Insert and Edit Modes</h3>\n\n<p>Still our dialog window must work both to add and to edit <code>&lt;abbr&gt;</code> elements. Because of this, we introduce some startup logic that identifies the proper case:</p>\n\n<pre><code>if ( element )\n    element = element.getAscendant( 'abbr', true );\n\nif ( !element || element.getName() != 'abbr' ) {\n    element = editor.document.createElement( 'abbr' );\n    this.insertMode = true;\n}\nelse\n    this.insertMode = false;\n</code></pre>\n\n<p>We just used similar <code>if</code> code that we used in the context menu checks to figure out whether the selected element, or any of its ancestors, is an <code>&lt;abbr&gt;</code>.</p>\n\n<p>To differentiate between adding a new element and editing an existing one, we will create a new <code>insertMode</code> flag. It will be set to <code>true</code> in the \"add new element\" scenario. If an <code>&lt;abbr&gt;</code> element already exists, the <code>insertMode</code> flag will be set to <code>false</code>.</p>\n\n<p>We will now store a reference to the <code>&lt;abbr&gt;</code> element in the <code>element</code> variable since we will need to access it in the new version of the <code>onOK</code> function later.</p>\n\n<pre><code>this.element = element;\n</code></pre>\n\n<h3 id='plugin_sdk_sample_2-section-setup-functions'>Setup Functions</h3>\n\n<p>The <code>onShow</code> function will finish with a call to the\n<a href=\"#!/api/CKEDITOR.dialog-method-setupContent\" rel=\"CKEDITOR.dialog-method-setupContent\" class=\"docClass\">setupContent</a> method that\nwill invoke the setup functions for the element. Each parameter that will be\npassed on to the <code>setupContent</code> function will also be passed on to the setup\nfunctions.</p>\n\n<pre><code>if ( !this.insertMode )\n    this.setupContent( element );\n</code></pre>\n\n<p>For the above code to work we will however first need to define the\n<a href=\"#!/api/CKEDITOR.dialog.definition.uiElement-property-setup\" rel=\"CKEDITOR.dialog.definition.uiElement-property-setup\" class=\"docClass\">setup</a>\nfunctions themselves. In order to do that, we will revisit the code of the\ndialog window UI elements.</p>\n\n<p>The setup function for the <strong>Abbreviation</strong> text field needs to get the content\nof the <code>&lt;abbr&gt;</code> element by using the\n<a href=\"#!/api/CKEDITOR.dom.element-method-getText\" rel=\"CKEDITOR.dom.element-method-getText\" class=\"docClass\">getText</a> method in order to populate the\nfield with its value by using the <a href=\"#!/api/CKEDITOR.dom.element-method-setValue\" rel=\"CKEDITOR.dom.element-method-setValue\" class=\"docClass\">setValue</a> method.</p>\n\n<p>A similar approach can be used for the <strong>Explanation</strong> field, although in this\ncase we will need to get the content of the <code>title</code> attribute of the <code>&lt;abbr&gt;</code>\nelement by using the <a href=\"#!/api/CKEDITOR.dom.element-method-getAttribute\" rel=\"CKEDITOR.dom.element-method-getAttribute\" class=\"docClass\">getAttribute</a>\nmethod in order to populate the field with its value by using the <code>setValue</code> method again.</p>\n\n<pre><code>elements: [\n    {\n        type: 'text',\n        id: 'abbr',\n        label: 'Abbreviation',\n        validate: CKEDITOR.dialog.validate.notEmpty( \"Abbreviation cannot be empty.\" ),\n        setup: function( element ) {\n            this.setValue( element.getText() );\n        }\n    },\n    {\n        type: 'text',\n        id: 'title',\n        label: 'Explanation',\n        validate: CKEDITOR.dialog.validate.notEmpty( \"Title cannot be empty.\" ),\n        setup: function( element ) {\n            this.setValue( element.getAttribute( \"title\" ) );\n        }\n    }\n]\n</code></pre>\n\n<p>Since the <strong>Advanced Settings</strong> tab contains a single <strong>Id</strong> text field that reflects\nthe content of the <code>id</code> attribute, we will use the same combination of the\n<code>getAttribute</code> and <code>setValue</code> methods as in case of the <strong>Explanation</strong> text field.</p>\n\n<pre><code>elements: [\n    {\n        type: 'text',\n        id: 'id',\n        label: 'Id',\n        setup: function( element ) {\n            this.setValue( element.getAttribute( \"id\" ) );\n        }\n    }\n]\n</code></pre>\n\n<p>When you reload the page, add an abbreviation, and then attempt to modify it by\nopening the context menu and selecting <strong>Edit Abbreviation</strong>, the <strong>Abbreviation\nProperties</strong> dialog window will now re-open with the <strong>Abbreviation</strong> and <strong>Explanation</strong>\nfields already filled in with the content of the edited element.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogFilled.png\" alt=\"Modifying an abbreviation in CKEditor\" width=\"607\" height=\"461\"></p></p>\n\n<p>Suppose you were to change the abbreviation spelling into lower case. Replace\nthe content of the text fields as follows and click the <strong>OK</strong> button.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogChanged.png\" alt=\"Modifying an abbreviation in CKEditor\" width=\"608\" height=\"428\"></p></p>\n\n<p>However, this operation fails. The modified values do not replace the content of the\nfirst abbreviation, but are used to create a new abbreviation element inserted\ninside the first one, at the position of the cursor.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogFailed.png\" alt=\"Abbreviation duplicate added in CKEditor\" width=\"607\" height=\"254\"></p></p>\n\n<p>Why is that so? It is because the current edition of the <code>onOk</code> function does not\ndifferentiate between adding an element and modifying it, so it simply inserts\nthe values supplied in the dialog window fields into the <code>&lt;abbr&gt;</code> that it\ncreates and adds this element to the document.</p>\n\n<h3 id='plugin_sdk_sample_2-section-commit-functions'>Commit Functions</h3>\n\n<p>To correct this error, we will need to re-write the code of the <code>onOk</code> function\nto account for both scenarios. The function can now, in fact, be stripped\nto the minimum.</p>\n\n<p>Firstly, we will define the variables for the dialog window (<code>dialog</code>) and\nthe <code>&lt;abbr&gt;</code> element (<code>abbr</code>).</p>\n\n<p>The <code>insertMode</code> flag created in the <code>onShow</code> function can then be used to switch\nbetween the creation of a new element and modification of the existing one.\nIf we are in the insert mode, we add a new <code>&lt;abbr&gt;</code> element to the document.\nWe then use the <a href=\"#!/api/CKEDITOR.dialog-method-commitContent\" rel=\"CKEDITOR.dialog-method-commitContent\" class=\"docClass\">commitContent</a> method to\npopulate the element with values entered by the user. Every parameter that is\npassed to the <code>commitContent</code> method will also be passed on to the commit functions.</p>\n\n<pre><code>onOk: function() {\n    var dialog = this,\n        abbr = dialog.element;\n\n    dialog.commitContent( abbr );\n\n    if ( dialog.insertMode )\n        editor.insertElement( abbr );\n}\n</code></pre>\n\n<p>To make the <code>commitContent</code> method work we will however first need to define\nthe <a href=\"#!/api/CKEDITOR.dialog.definition.uiElement-property-commit\" rel=\"CKEDITOR.dialog.definition.uiElement-property-commit\" class=\"docClass\">commit</a> functions themselves.\nIn order to do that, we will have to revise  the code of the dialog window UI elements again.</p>\n\n<p>The commit function for the <strong>Abbreviation</strong> text field needs to get the value\nentered by the user by using the <a href=\"#!/api/CKEDITOR.dom.element-method-getValue\" rel=\"CKEDITOR.dom.element-method-getValue\" class=\"docClass\">getValue</a>\nmethod to set the content of the <code>&lt;abbr&gt;</code> element by using the\n<a href=\"#!/api/CKEDITOR.dom.element-method-setText\" rel=\"CKEDITOR.dom.element-method-setText\" class=\"docClass\">setText</a> method.</p>\n\n<p>A similar approach can be used for the retrieval of the <strong>Explanation</strong> field\ncontent, although in this case we will need to set the content of the\n<code>title</code> attribute of the <code>&lt;abbr&gt;</code> element by using the\n<a href=\"#!/api/CKEDITOR.dom.element-method-setAttribute\" rel=\"CKEDITOR.dom.element-method-setAttribute\" class=\"docClass\">setAttribute</a> method.</p>\n\n<pre><code>elements: [\n    {\n        type: 'text',\n        id: 'abbr',\n        label: 'Abbreviation',\n        validate: CKEDITOR.dialog.validate.notEmpty( \"Abbreviation cannot be empty.\" ),\n        setup: function( element ) {\n            this.setValue( element.getText() );\n        },\n        commit: function( element ) {\n            element.setText( this.getValue() );\n        }\n    },\n    {\n        type: 'text',\n        id: 'title',\n        label: 'Explanation',\n        validate: CKEDITOR.dialog.validate.notEmpty( \"Title cannot be empty.\" ),\n        setup: function( element ) {\n            this.setValue( element.getAttribute( \"title\" ) );\n        },\n        commit: function( element ) {\n            element.setAttribute( \"title\", this.getValue() );\n        }\n    }\n]\n</code></pre>\n\n<p>Similarly, since the <strong>Advanced Settings</strong> tab contains an <code>Id</code> text field that\nreflects the content of the <code>id</code> attribute, we will use the same combination\nof the <code>getValue</code> and <code>setAttribute</code> methods as in case of the <strong>Explanation</strong>\ntext field. This time, however, we will also need to account for the\npossibility of removing the attribute value by the user during the\nmodification of the element. If we are not in the insert mode (which\nmeans we are editing an existing element) and the <code>Id</code> field is empty, we\nwill use the <a href=\"#!/api/CKEDITOR.dom.element-method-removeAttribute\" rel=\"CKEDITOR.dom.element-method-removeAttribute\" class=\"docClass\">removeAttribute</a> method to\ndelete the <code>id</code> element of an existing abbreviation.</p>\n\n<pre><code>elements: [\n    {\n        type: 'text',\n        id: 'id',\n        label: 'Id',\n        setup: function( element ) {\n            this.setValue( element.getAttribute( \"id\" ) );\n        },\n        commit: function ( element ) {\n            var id = this.getValue();\n            if ( id )\n                element.setAttribute( 'id', id );\n            else if ( !this.insertMode )\n                element.removeAttribute( 'id' );\n        }\n    }\n]\n</code></pre>\n\n<h2 id='plugin_sdk_sample_2-section-full-source-code'>Full Source Code</h2>\n\n<p>The complete content of the <code>plugin.js</code> file is as follows:</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.plugins-method-add\" rel=\"CKEDITOR.plugins-method-add\" class=\"docClass\">CKEDITOR.plugins.add</a>( 'abbr', {\n    icons: 'abbr',\n    init: function( editor ) {\n\n        editor.addCommand( 'abbr', new <a href=\"#!/api/CKEDITOR.dialogCommand\" rel=\"CKEDITOR.dialogCommand\" class=\"docClass\">CKEDITOR.dialogCommand</a>( 'abbrDialog' ) );\n\n        editor.ui.addButton( 'Abbr', {\n            label: 'Insert Abbreviation',\n            command: 'abbr',\n            toolbar: 'insert'\n        });\n\n        if ( editor.contextMenu ) {\n            editor.addMenuGroup( 'abbrGroup' );\n            editor.addMenuItem( 'abbrItem', {\n                label: 'Edit Abbreviation',\n                icon: this.path + 'icons/abbr.png',\n                command: 'abbr',\n                group: 'abbrGroup'\n            });\n\n            editor.contextMenu.addListener( function( element ) {\n                if ( element.getAscendant( 'abbr', true ) ) {\n                    return { abbrItem: <a href=\"#!/api/CKEDITOR-property-TRISTATE_OFF\" rel=\"CKEDITOR-property-TRISTATE_OFF\" class=\"docClass\">CKEDITOR.TRISTATE_OFF</a> };\n                }\n            });\n        }\n\n        <a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>( 'abbrDialog', this.path + 'dialogs/abbr.js' );\n    }\n});\n</code></pre>\n\n<p>This is what we have in the <code>dialogs/abbr.js</code> file:</p>\n\n<pre><code><a href=\"#!/api/CKEDITOR.dialog-static-method-add\" rel=\"CKEDITOR.dialog-static-method-add\" class=\"docClass\">CKEDITOR.dialog.add</a>( 'abbrDialog', function( editor ) {\n    return {\n        title: 'Abbreviation Properties',\n        minWidth: 400,\n        minHeight: 200,\n\n        contents: [\n            {\n                id: 'tab-basic',\n                label: 'Basic Settings',\n                elements: [\n                    {\n                        type: 'text',\n                        id: 'abbr',\n                        label: 'Abbreviation',\n                        validate: CKEDITOR.dialog.validate.notEmpty( \"Abbreviation field cannot be empty.\" ),\n\n                        setup: function( element ) {\n                            this.setValue( element.getText() );\n                        },\n\n                        commit: function( element ) {\n                            element.setText( this.getValue() );\n                        }\n                    },\n                    {\n                        type: 'text',\n                        id: 'title',\n                        label: 'Explanation',\n                        validate: CKEDITOR.dialog.validate.notEmpty( \"Explanation field cannot be empty.\" ),\n\n                        setup: function( element ) {\n                            this.setValue( element.getAttribute( \"title\" ) );\n                        },\n\n                        commit: function( element ) {\n                            element.setAttribute( \"title\", this.getValue() );\n                        }\n                    }\n                ]\n            },\n\n            {\n                id: 'tab-adv',\n                label: 'Advanced Settings',\n                elements: [\n                    {\n                        type: 'text',\n                        id: 'id',\n                        label: 'Id',\n\n                        setup: function( element ) {\n                            this.setValue( element.getAttribute( \"id\" ) );\n                        },\n\n                        commit: function ( element ) {\n                            var id = this.getValue();\n                            if ( id )\n                                element.setAttribute( 'id', id );\n                            else if ( !this.insertMode )\n                                element.removeAttribute( 'id' );\n                        }\n                    }\n                ]\n            }\n        ],\n\n        onShow: function() {\n            var selection = editor.getSelection();\n            var element = selection.getStartElement();\n\n            if ( element )\n                element = element.getAscendant( 'abbr', true );\n\n            if ( !element || element.getName() != 'abbr' ) {\n                element = editor.document.createElement( 'abbr' );\n                this.insertMode = true;\n            }\n            else\n                this.insertMode = false;\n\n            this.element = element;\n            if ( !this.insertMode )\n                this.setupContent( this.element );\n        },\n\n        onOk: function() {\n            var dialog = this;\n            var abbr = this.element;\n            this.commitContent( abbr );\n\n            if ( this.insertMode )\n                editor.insertElement( abbr );\n        }\n    };\n});\n</code></pre>\n\n<p class=\"tip\">\n    You can also <a href=\"https://github.com/ckeditor/ckeditor-docs-samples/tree/master/tutorial-abbr-2\">download the\n    entire plugin folder</a> inluding the icon and the fully commented source code.\n</p>\n\n\n<h2 id='plugin_sdk_sample_2-section-working-example'>Working Example</h2>\n\n<p>The code of the extended Abbreviation plugin is now ready. When you click the\n<strong>Insert Abbreviation</strong> toolbar button, the <strong>Abbreviation Properties</strong> dialog window\nwill open. Fill in the obligatory <strong>Abbreviation</strong> and <strong>Explanation</strong> fields and\nclick the <strong>OK</strong> button.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogNew.png\" alt=\"Abbreviation added in the dialog window\" width=\"608\" height=\"429\"></p></p>\n\n<p>The newly added abbreviation will be inserted into the document and will be\ndisplayed using the default styling of your browser. In Firefox, for example,\nthe abbreviation will be underlined using a dotted line and the explanation will\nbe displayed in a tooltip.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogAdded.png\" alt=\"Abbreviation added in the dialog window\" width=\"608\" height=\"148\"></p></p>\n\n<p>If you want to edit the abbreviation, select it and open its context menu.\nChoose the <strong>Edit Abbreviation</strong> option to open the dialog window again, filled\nin with the content of the element. Modify the abbreviation and click <strong>OK</strong>.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogChanged.png\" alt=\"Abbreviation edited in the dialog window\" width=\"608\" height=\"428\"></p></p>\n\n<p>Voilà! The abbreviation was updated and its content was replaced with texts\nentered in the dialog window.</p>\n\n<p><p><img src=\"guides/plugin_sdk_sample_2/abbr2PluginDialogSuccess.png\" alt=\"Abbreviation edited in the dialog window\" width=\"607\" height=\"255\"></p></p>\n\n<h2 id='plugin_sdk_sample_2-section-further-reading'>Further Reading</h2>\n\n<p>Refer to the following resources for more information about creating CKEditor plugins:</p>\n\n<ul>\n<li><a href=\"#!/guide/plugin_sdk_sample\">Creating a CKEditor Plugin in 20 Lines of Code</a> &ndash; Create your first CKEditor plugin that inserts a piece of HTML code into the document.</li>\n<li><a href=\"#!/guide/plugin_sdk_sample_1\">Simple Plugin, Part 1</a> &ndash; Develop a basic Abbreviation plugin with a dialog window that lets the user insert a an abbreviation element into the document.</li>\n<li><a href=\"#!/guide/plugin_sdk_integration_with_acf\">Integrating Plugins with Advanced Content Filter</a> &ndash; Learn how to implement Advanced Content Filter support in your plugins.</li>\n<li><a href=\"#!/guide/plugin_sdk_styles\">Plugin Stylesheets</a> &ndash; Tips on how to integrate custom plugin stylesheets with CKEditor.</li>\n<li><a href=\"#!/api/CKEDITOR.pluginDefinition\">Plugin Definition API</a> &ndash; Detailed description of the plugin definition.</li>\n</ul>\n\n","title":"Simple Plugin (Part 2)","meta_description":"Learn by creating a simple plugin, part 2.","meta_keywords":"ckeditor, editor, wysiwyg, plugin, plugins, addon, add-on, sdk, custom, development, tutorial, example, sample, abbr, abbreviation"});