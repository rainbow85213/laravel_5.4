Ext.data.JsonP.skin_sdk_icons({"guide":"<!--\nCopyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.\nFor licensing, see LICENSE.md.\n-->\n\n\n<h1 id='skin_sdk_icons-section-icons'>Icons</h1>\n\n<p>An important aspect that a skin can (optionally) customize are the icons used on the CKEditor toolbar and context menu. This is not mandatory in any way, but it makes it possible to precisely align the icons design with the skin lines.</p>\n\n<p>The CKEditor toolbar is filled by buttons provided by plugins. These plugins include default icons for their buttons. The skin role here is eventually overriding those icons, by providing a different version of them. This means that, if a skin icon is available for a button, it will be used, otherwise the default plugin icon is used.</p>\n\n<p>There is a huge number of plugins available for CKEditor, provided by people and companies all around the world. It is impossible for a skin developer to provide icons for every single plugin, so it is up to her to decide which icons to include.</p>\n\n<p>All skin icons must be included inside the <code>icons</code> folder in the skin folder. The icons file name must match the name of the icon files available in the <code>icons</code> folder of the plugins.</p>\n\n<p>If you want the source version of your skin to overload icons properly, you must inform CKEditor about the presence of your custom icons. This is optional, but if not done your icons will be visible in the release version of your skin only. Check the <code>skin.js</code> file in the <a href=\"#!/guide/skin_sdk_intro-section-2\">Moono skin</a> for an example.</p>\n","title":"Icons","meta_description":"In-depth details about concepts that constitute a skin.","meta_keywords":"ckeditor, editor, wysiwyg, skin, skins, tutorial, sample, sdk, example, development, icon, icons, button, toolbar"});